/**
 * Generated by orval v6.14.3 🍺
 * Do not edit manually.
 * Farmer App API
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ApiResponse,
  RegisterModel,
  LoginReturnModel,
  LoginModel,
  ResetPasswordModel,
  PostApiAccountSetuserpasswordParams,
  UserModel,
  UsersPaginatedResponse,
  GetApiAccountGetallusersParams,
  UpdateUserModel,
  PutApiAccountUpdatelockoutenabledParams,
  ChangePasswordModel,
  ForgotPassword,
  PostApiAccountForgotpasswordParams,
  PostApiAccountChangePasswordParams,
  ExternalAuthDto,
  IrrigationTypeResponse,
  PostApiAccountVerifyExtTokenParams,
  AddressRequest,
  AddressResponse,
  GetApiAccountGetAddressesByUserIdParams,
  CreateUpdateCostCalculationModel,
  CostCalculationModel,
  PutApiAccountDeleteCostCalculationParams,
  UserBasicDetails,
  MobileAppUserBasicDetails,
  PostApiAdBannerCreateUpdateAdBannerBody,
  AdBannerResponse,
  GetApiAdBannerGetByAdBannerIdParams,
  AdBannerPaginatedResponse,
  GetApiAdBannerGetAdBannersParams,
  PutApiAdBannerDeleteAdBannerParams,
  ArEnTranslation,
  GetApiArEnTranslationGetarentranslationbyidParams,
  DeleteApiArEnTranslationDeleteParams,
  Governorate,
  City,
  GetApiCommonFetchCityByGovernateByIdParams,
  Village,
  GetApiCommonFetchVillageByCityIdParams,
  PostApiCropCreateUpdateCropCategoryBody,
  PostApiCropCreateUpdateCropBody,
  CultivationDetailRequest,
  FarmCropsRequest,
  CropCategoryResponse,
  GetApiCropGetCropCategoryByIdParams,
  CropBasicResponse,
  GetApiCropGetCropsByCategoryIdParams,
  CropCategoryPaginatedResponse,
  GetApiCropGetCropCategoriesParams,
  CropResponse,
  GetApiCropGetCropByIdParams,
  CropPaginatedResponse,
  GetApiCropGetCropsParams,
  FarmCropCultivationResponse,
  GetApiCropGetCultivationDetailsByFarmIdParams,
  FarmCropsResponse,
  GetApiCropGetCropsByFarmIdParams,
  DeleteApiCropDeleteCropParams,
  DeleteApiCropDeleteCropCategoryParams,
  CropIdsActivitiesRequest,
  UpdatedCropCalendarActivityPaginatedResponse,
  GetApiCropFetchCropCalendarActivitiesParams,
  PutApiCropDeleteCropCalendarActivityParams,
  PhaseSubPhaseRequest,
  PhaseSubPhaseResponse,
  Activity,
  DeleteApiCropDeletePhaseActivityParams,
  FarmRequest,
  FarmResponse,
  GetApiFarmGetFarmByIdParams,
  GetApiFarmGetFarmsParams,
  DeleteApiFarmDeleteFarmByIdParams,
  FarmExists,
  GovernorateRequest,
  GovernorateResponse,
  GetApiGovernorateGetGovernorateByIdParams,
  GetApiGovernorateGetGovernoratesParams,
  IrrigationTypeRequest,
  GetApiIrrigationTypeGetIrrigationTypeByIdParams,
  GetApiIrrigationTypeGetGetIrrigationTypesParams,
  Rss,
  SoilTypeRequest,
  PostApiSoilTypeGetSoilTypeByIdParams,
  SoilTypeResponse,
  GetApiSoilTypeGetSoilTypesParams,
  RoleModel,
  RoleUpdateModel,
  IdentityRole,
  DeleteApiUserRoleDeleteRoleParams,
  CurrentConditions,
  GetApiWeatherGetCurrentConditionsParams,
  GeoLocation,
  GetApiWeatherGetLocationKeyParams
} from '../model'
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';


/**
 * @summary Register
 */
export const postApiAccountCreateUser = (
    registerModel: RegisterModel,
 ) => {
      return customInstance<ApiResponse>(
      {url: `/api/Account/createUser`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: registerModel
    },
      );
    }
  


export const getPostApiAccountCreateUserMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUser>>, TError,{data: RegisterModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUser>>, TError,{data: RegisterModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountCreateUser>>, {data: RegisterModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountCreateUser(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountCreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountCreateUser>>>
    export type PostApiAccountCreateUserMutationBody = RegisterModel
    export type PostApiAccountCreateUserMutationError = ErrorType<unknown>

    export const usePostApiAccountCreateUser = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUser>>, TError,{data: RegisterModel}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountCreateUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Login
 */
export const postApiAccountLogin = (
    loginModel: LoginModel,
 ) => {
      return customInstance<LoginReturnModel>(
      {url: `/api/Account/login`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: loginModel
    },
      );
    }
  


export const getPostApiAccountLoginMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogin>>, TError,{data: LoginModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogin>>, TError,{data: LoginModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountLogin>>, {data: LoginModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountLogin(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountLogin>>>
    export type PostApiAccountLoginMutationBody = LoginModel
    export type PostApiAccountLoginMutationError = ErrorType<unknown>

    export const usePostApiAccountLogin = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogin>>, TError,{data: LoginModel}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountLoginMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary resetpassword
 */
export const confirmEmailRoute = (
    resetPasswordModel: ResetPasswordModel,
 ) => {
      return customInstance<void>(
      {url: `/api/Account/resetpassword`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordModel
    },
      );
    }
  


export const getConfirmEmailRouteMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmEmailRoute>>, TError,{data: ResetPasswordModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof confirmEmailRoute>>, TError,{data: ResetPasswordModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof confirmEmailRoute>>, {data: ResetPasswordModel}> = (props) => {
          const {data} = props ?? {};

          return  confirmEmailRoute(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ConfirmEmailRouteMutationResult = NonNullable<Awaited<ReturnType<typeof confirmEmailRoute>>>
    export type ConfirmEmailRouteMutationBody = ResetPasswordModel
    export type ConfirmEmailRouteMutationError = ErrorType<unknown>

    export const useConfirmEmailRoute = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmEmailRoute>>, TError,{data: ResetPasswordModel}, TContext>, }
) => {
    
      const mutationOptions = getConfirmEmailRouteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary setuserpassword
 */
export const postApiAccountSetuserpassword = (
    params?: PostApiAccountSetuserpasswordParams,
 ) => {
      return customInstance<void>(
      {url: `/api/Account/setuserpassword`, method: 'post',
        params
    },
      );
    }
  


export const getPostApiAccountSetuserpasswordMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountSetuserpassword>>, TError,{params?: PostApiAccountSetuserpasswordParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountSetuserpassword>>, TError,{params?: PostApiAccountSetuserpasswordParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountSetuserpassword>>, {params?: PostApiAccountSetuserpasswordParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiAccountSetuserpassword(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountSetuserpasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountSetuserpassword>>>
    
    export type PostApiAccountSetuserpasswordMutationError = ErrorType<unknown>

    export const usePostApiAccountSetuserpassword = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountSetuserpassword>>, TError,{params?: PostApiAccountSetuserpasswordParams}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountSetuserpasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary GetUserDetails
 */
export const getApiAccountGetuserdetails = (
    
 signal?: AbortSignal
) => {
      return customInstance<UserModel>(
      {url: `/api/Account/getuserdetails`, method: 'get', signal
    },
      );
    }
  

export const getGetApiAccountGetuserdetailsQueryKey = () => [`/api/Account/getuserdetails`] as const;
  

    
export const getGetApiAccountGetuserdetailsQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountGetuserdetails>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetuserdetails>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetuserdetails>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountGetuserdetailsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountGetuserdetails>>> = ({ signal }) => getApiAccountGetuserdetails(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAccountGetuserdetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountGetuserdetails>>>
export type GetApiAccountGetuserdetailsQueryError = ErrorType<unknown>

export const useGetApiAccountGetuserdetails = <TData = Awaited<ReturnType<typeof getApiAccountGetuserdetails>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetuserdetails>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountGetuserdetailsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary GetAllUsers
 */
export const getApiAccountGetallusers = (
    params?: GetApiAccountGetallusersParams,
 signal?: AbortSignal
) => {
      return customInstance<UsersPaginatedResponse>(
      {url: `/api/Account/getallusers`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiAccountGetallusersQueryKey = (params?: GetApiAccountGetallusersParams,) => [`/api/Account/getallusers`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiAccountGetallusersQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountGetallusers>>, TError = ErrorType<unknown>>(params?: GetApiAccountGetallusersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetallusers>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetallusers>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountGetallusersQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountGetallusers>>> = ({ signal }) => getApiAccountGetallusers(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAccountGetallusersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountGetallusers>>>
export type GetApiAccountGetallusersQueryError = ErrorType<unknown>

export const useGetApiAccountGetallusers = <TData = Awaited<ReturnType<typeof getApiAccountGetallusers>>, TError = ErrorType<unknown>>(
 params?: GetApiAccountGetallusersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetallusers>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountGetallusersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary GetAllActiveUserDetails
 */
export const getApiAccountGetallactiveuserdetails = (
    
 signal?: AbortSignal
) => {
      return customInstance<UserModel[]>(
      {url: `/api/Account/getallactiveuserdetails`, method: 'get', signal
    },
      );
    }
  

export const getGetApiAccountGetallactiveuserdetailsQueryKey = () => [`/api/Account/getallactiveuserdetails`] as const;
  

    
export const getGetApiAccountGetallactiveuserdetailsQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountGetallactiveuserdetails>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetallactiveuserdetails>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetallactiveuserdetails>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountGetallactiveuserdetailsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountGetallactiveuserdetails>>> = ({ signal }) => getApiAccountGetallactiveuserdetails(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAccountGetallactiveuserdetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountGetallactiveuserdetails>>>
export type GetApiAccountGetallactiveuserdetailsQueryError = ErrorType<unknown>

export const useGetApiAccountGetallactiveuserdetails = <TData = Awaited<ReturnType<typeof getApiAccountGetallactiveuserdetails>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetallactiveuserdetails>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountGetallactiveuserdetailsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary GetAllDeActiveUserDetails
 */
export const getApiAccountGetalldeactiveuserdetails = (
    
 signal?: AbortSignal
) => {
      return customInstance<UserModel[]>(
      {url: `/api/Account/getalldeactiveuserdetails`, method: 'get', signal
    },
      );
    }
  

export const getGetApiAccountGetalldeactiveuserdetailsQueryKey = () => [`/api/Account/getalldeactiveuserdetails`] as const;
  

    
export const getGetApiAccountGetalldeactiveuserdetailsQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountGetalldeactiveuserdetails>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetalldeactiveuserdetails>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetalldeactiveuserdetails>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountGetalldeactiveuserdetailsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountGetalldeactiveuserdetails>>> = ({ signal }) => getApiAccountGetalldeactiveuserdetails(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAccountGetalldeactiveuserdetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountGetalldeactiveuserdetails>>>
export type GetApiAccountGetalldeactiveuserdetailsQueryError = ErrorType<unknown>

export const useGetApiAccountGetalldeactiveuserdetails = <TData = Awaited<ReturnType<typeof getApiAccountGetalldeactiveuserdetails>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetalldeactiveuserdetails>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountGetalldeactiveuserdetailsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary UpdateUser
 */
export const putApiAccountUpdateuser = (
    updateUserModel: UpdateUserModel,
 ) => {
      return customInstance<string>(
      {url: `/api/Account/updateuser`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateUserModel
    },
      );
    }
  


export const getPutApiAccountUpdateuserMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountUpdateuser>>, TError,{data: UpdateUserModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiAccountUpdateuser>>, TError,{data: UpdateUserModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiAccountUpdateuser>>, {data: UpdateUserModel}> = (props) => {
          const {data} = props ?? {};

          return  putApiAccountUpdateuser(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutApiAccountUpdateuserMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAccountUpdateuser>>>
    export type PutApiAccountUpdateuserMutationBody = UpdateUserModel
    export type PutApiAccountUpdateuserMutationError = ErrorType<unknown>

    export const usePutApiAccountUpdateuser = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountUpdateuser>>, TError,{data: UpdateUserModel}, TContext>, }
) => {
    
      const mutationOptions = getPutApiAccountUpdateuserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary UpdateUser
 */
export const putApiAccountUpdatelockoutenabled = (
    params?: PutApiAccountUpdatelockoutenabledParams,
 ) => {
      return customInstance<string>(
      {url: `/api/Account/updatelockoutenabled`, method: 'put',
        params
    },
      );
    }
  


export const getPutApiAccountUpdatelockoutenabledMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountUpdatelockoutenabled>>, TError,{params?: PutApiAccountUpdatelockoutenabledParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiAccountUpdatelockoutenabled>>, TError,{params?: PutApiAccountUpdatelockoutenabledParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiAccountUpdatelockoutenabled>>, {params?: PutApiAccountUpdatelockoutenabledParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiAccountUpdatelockoutenabled(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutApiAccountUpdatelockoutenabledMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAccountUpdatelockoutenabled>>>
    
    export type PutApiAccountUpdatelockoutenabledMutationError = ErrorType<unknown>

    export const usePutApiAccountUpdatelockoutenabled = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountUpdatelockoutenabled>>, TError,{params?: PutApiAccountUpdatelockoutenabledParams}, TContext>, }
) => {
    
      const mutationOptions = getPutApiAccountUpdatelockoutenabledMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary ForgotPassword
 */
export const putApiAccountChangepassword = (
    changePasswordModel: ChangePasswordModel,
 ) => {
      return customInstance<string>(
      {url: `/api/Account/changepassword`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: changePasswordModel
    },
      );
    }
  


export const getPutApiAccountChangepasswordMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountChangepassword>>, TError,{data: ChangePasswordModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiAccountChangepassword>>, TError,{data: ChangePasswordModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiAccountChangepassword>>, {data: ChangePasswordModel}> = (props) => {
          const {data} = props ?? {};

          return  putApiAccountChangepassword(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutApiAccountChangepasswordMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAccountChangepassword>>>
    export type PutApiAccountChangepasswordMutationBody = ChangePasswordModel
    export type PutApiAccountChangepasswordMutationError = ErrorType<unknown>

    export const usePutApiAccountChangepassword = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountChangepassword>>, TError,{data: ChangePasswordModel}, TContext>, }
) => {
    
      const mutationOptions = getPutApiAccountChangepasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary ForgotPassword
 */
export const postApiAccountForgotpassword = (
    forgotPassword: ForgotPassword,
    params?: PostApiAccountForgotpasswordParams,
 ) => {
      return customInstance<string>(
      {url: `/api/Account/forgotpassword`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: forgotPassword,
        params
    },
      );
    }
  


export const getPostApiAccountForgotpasswordMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountForgotpassword>>, TError,{data: ForgotPassword;params?: PostApiAccountForgotpasswordParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountForgotpassword>>, TError,{data: ForgotPassword;params?: PostApiAccountForgotpasswordParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountForgotpassword>>, {data: ForgotPassword;params?: PostApiAccountForgotpasswordParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiAccountForgotpassword(data,params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountForgotpasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountForgotpassword>>>
    export type PostApiAccountForgotpasswordMutationBody = ForgotPassword
    export type PostApiAccountForgotpasswordMutationError = ErrorType<unknown>

    export const usePostApiAccountForgotpassword = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountForgotpassword>>, TError,{data: ForgotPassword;params?: PostApiAccountForgotpasswordParams}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountForgotpasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiAccountChangePassword = (
    params?: PostApiAccountChangePasswordParams,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Account/changePassword`, method: 'post',
        params
    },
      );
    }
  


export const getPostApiAccountChangePasswordMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountChangePassword>>, TError,{params?: PostApiAccountChangePasswordParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountChangePassword>>, TError,{params?: PostApiAccountChangePasswordParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountChangePassword>>, {params?: PostApiAccountChangePasswordParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiAccountChangePassword(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountChangePassword>>>
    
    export type PostApiAccountChangePasswordMutationError = ErrorType<unknown>

    export const usePostApiAccountChangePassword = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountChangePassword>>, TError,{params?: PostApiAccountChangePasswordParams}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountChangePasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiAccountExternalGoogleLogin = (
    externalAuthDto: ExternalAuthDto,
 ) => {
      return customInstance<void>(
      {url: `/api/Account/externalGoogleLogin`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: externalAuthDto
    },
      );
    }
  


export const getPostApiAccountExternalGoogleLoginMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountExternalGoogleLogin>>, TError,{data: ExternalAuthDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountExternalGoogleLogin>>, TError,{data: ExternalAuthDto}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountExternalGoogleLogin>>, {data: ExternalAuthDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountExternalGoogleLogin(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountExternalGoogleLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountExternalGoogleLogin>>>
    export type PostApiAccountExternalGoogleLoginMutationBody = ExternalAuthDto
    export type PostApiAccountExternalGoogleLoginMutationError = ErrorType<unknown>

    export const usePostApiAccountExternalGoogleLogin = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountExternalGoogleLogin>>, TError,{data: ExternalAuthDto}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountExternalGoogleLoginMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiAccountVerifyExtToken = (
    params?: PostApiAccountVerifyExtTokenParams,
 ) => {
      return customInstance<IrrigationTypeResponse>(
      {url: `/api/Account/verifyExtToken`, method: 'post',
        params
    },
      );
    }
  


export const getPostApiAccountVerifyExtTokenMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountVerifyExtToken>>, TError,{params?: PostApiAccountVerifyExtTokenParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountVerifyExtToken>>, TError,{params?: PostApiAccountVerifyExtTokenParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountVerifyExtToken>>, {params?: PostApiAccountVerifyExtTokenParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiAccountVerifyExtToken(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountVerifyExtTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountVerifyExtToken>>>
    
    export type PostApiAccountVerifyExtTokenMutationError = ErrorType<unknown>

    export const usePostApiAccountVerifyExtToken = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountVerifyExtToken>>, TError,{params?: PostApiAccountVerifyExtTokenParams}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountVerifyExtTokenMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create update address for user
 */
export const postApiAccountCreateUpdateAddress = (
    addressRequest: AddressRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Account/createUpdateAddress`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addressRequest
    },
      );
    }
  


export const getPostApiAccountCreateUpdateAddressMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUpdateAddress>>, TError,{data: AddressRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUpdateAddress>>, TError,{data: AddressRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountCreateUpdateAddress>>, {data: AddressRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountCreateUpdateAddress(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountCreateUpdateAddressMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountCreateUpdateAddress>>>
    export type PostApiAccountCreateUpdateAddressMutationBody = AddressRequest
    export type PostApiAccountCreateUpdateAddressMutationError = ErrorType<unknown>

    export const usePostApiAccountCreateUpdateAddress = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUpdateAddress>>, TError,{data: AddressRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountCreateUpdateAddressMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get address for user
 */
export const getApiAccountGetAddressesByUserId = (
    params?: GetApiAccountGetAddressesByUserIdParams,
 signal?: AbortSignal
) => {
      return customInstance<AddressResponse[]>(
      {url: `/api/Account/getAddressesByUserId`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiAccountGetAddressesByUserIdQueryKey = (params?: GetApiAccountGetAddressesByUserIdParams,) => [`/api/Account/getAddressesByUserId`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiAccountGetAddressesByUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountGetAddressesByUserId>>, TError = ErrorType<unknown>>(params?: GetApiAccountGetAddressesByUserIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetAddressesByUserId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetAddressesByUserId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountGetAddressesByUserIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountGetAddressesByUserId>>> = ({ signal }) => getApiAccountGetAddressesByUserId(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAccountGetAddressesByUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountGetAddressesByUserId>>>
export type GetApiAccountGetAddressesByUserIdQueryError = ErrorType<unknown>

export const useGetApiAccountGetAddressesByUserId = <TData = Awaited<ReturnType<typeof getApiAccountGetAddressesByUserId>>, TError = ErrorType<unknown>>(
 params?: GetApiAccountGetAddressesByUserIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetAddressesByUserId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountGetAddressesByUserIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const postApiAccountCreateUpdateCostCalculation = (
    createUpdateCostCalculationModel: CreateUpdateCostCalculationModel,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Account/createUpdateCostCalculation`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createUpdateCostCalculationModel
    },
      );
    }
  


export const getPostApiAccountCreateUpdateCostCalculationMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUpdateCostCalculation>>, TError,{data: CreateUpdateCostCalculationModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUpdateCostCalculation>>, TError,{data: CreateUpdateCostCalculationModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountCreateUpdateCostCalculation>>, {data: CreateUpdateCostCalculationModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountCreateUpdateCostCalculation(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountCreateUpdateCostCalculationMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountCreateUpdateCostCalculation>>>
    export type PostApiAccountCreateUpdateCostCalculationMutationBody = CreateUpdateCostCalculationModel
    export type PostApiAccountCreateUpdateCostCalculationMutationError = ErrorType<unknown>

    export const usePostApiAccountCreateUpdateCostCalculation = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUpdateCostCalculation>>, TError,{data: CreateUpdateCostCalculationModel}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountCreateUpdateCostCalculationMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiAccountGetCostCalculations = (
    
 signal?: AbortSignal
) => {
      return customInstance<CostCalculationModel[]>(
      {url: `/api/Account/getCostCalculations`, method: 'get', signal
    },
      );
    }
  

export const getGetApiAccountGetCostCalculationsQueryKey = () => [`/api/Account/getCostCalculations`] as const;
  

    
export const getGetApiAccountGetCostCalculationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountGetCostCalculations>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetCostCalculations>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetCostCalculations>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountGetCostCalculationsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountGetCostCalculations>>> = ({ signal }) => getApiAccountGetCostCalculations(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAccountGetCostCalculationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountGetCostCalculations>>>
export type GetApiAccountGetCostCalculationsQueryError = ErrorType<unknown>

export const useGetApiAccountGetCostCalculations = <TData = Awaited<ReturnType<typeof getApiAccountGetCostCalculations>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountGetCostCalculations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountGetCostCalculationsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const putApiAccountDeleteCostCalculation = (
    params?: PutApiAccountDeleteCostCalculationParams,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Account/deleteCostCalculation`, method: 'put',
        params
    },
      );
    }
  


export const getPutApiAccountDeleteCostCalculationMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountDeleteCostCalculation>>, TError,{params?: PutApiAccountDeleteCostCalculationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiAccountDeleteCostCalculation>>, TError,{params?: PutApiAccountDeleteCostCalculationParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiAccountDeleteCostCalculation>>, {params?: PutApiAccountDeleteCostCalculationParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiAccountDeleteCostCalculation(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutApiAccountDeleteCostCalculationMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAccountDeleteCostCalculation>>>
    
    export type PutApiAccountDeleteCostCalculationMutationError = ErrorType<unknown>

    export const usePutApiAccountDeleteCostCalculation = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountDeleteCostCalculation>>, TError,{params?: PutApiAccountDeleteCostCalculationParams}, TContext>, }
) => {
    
      const mutationOptions = getPutApiAccountDeleteCostCalculationMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiAccountCreateUserBasicDetails = (
    userBasicDetails: UserBasicDetails,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Account/createUserBasicDetails`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: userBasicDetails
    },
      );
    }
  


export const getPostApiAccountCreateUserBasicDetailsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUserBasicDetails>>, TError,{data: UserBasicDetails}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUserBasicDetails>>, TError,{data: UserBasicDetails}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountCreateUserBasicDetails>>, {data: UserBasicDetails}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountCreateUserBasicDetails(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountCreateUserBasicDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountCreateUserBasicDetails>>>
    export type PostApiAccountCreateUserBasicDetailsMutationBody = UserBasicDetails
    export type PostApiAccountCreateUserBasicDetailsMutationError = ErrorType<unknown>

    export const usePostApiAccountCreateUserBasicDetails = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCreateUserBasicDetails>>, TError,{data: UserBasicDetails}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAccountCreateUserBasicDetailsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiAccountFetchUserBasicDetails = (
    
 signal?: AbortSignal
) => {
      return customInstance<MobileAppUserBasicDetails>(
      {url: `/api/Account/fetchUserBasicDetails`, method: 'get', signal
    },
      );
    }
  

export const getGetApiAccountFetchUserBasicDetailsQueryKey = () => [`/api/Account/fetchUserBasicDetails`] as const;
  

    
export const getGetApiAccountFetchUserBasicDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountFetchUserBasicDetails>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountFetchUserBasicDetails>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAccountFetchUserBasicDetails>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountFetchUserBasicDetailsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountFetchUserBasicDetails>>> = ({ signal }) => getApiAccountFetchUserBasicDetails(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAccountFetchUserBasicDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountFetchUserBasicDetails>>>
export type GetApiAccountFetchUserBasicDetailsQueryError = ErrorType<unknown>

export const useGetApiAccountFetchUserBasicDetails = <TData = Awaited<ReturnType<typeof getApiAccountFetchUserBasicDetails>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountFetchUserBasicDetails>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountFetchUserBasicDetailsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const postApiAdBannerCreateUpdateAdBanner = (
    postApiAdBannerCreateUpdateAdBannerBody: PostApiAdBannerCreateUpdateAdBannerBody,
 ) => {const formData = new FormData();
if(postApiAdBannerCreateUpdateAdBannerBody.Id !== undefined) {
 formData.append('Id', postApiAdBannerCreateUpdateAdBannerBody.Id)
 }
if(postApiAdBannerCreateUpdateAdBannerBody.Name !== undefined) {
 formData.append('Name', postApiAdBannerCreateUpdateAdBannerBody.Name)
 }
if(postApiAdBannerCreateUpdateAdBannerBody.ImageUrl !== undefined) {
 formData.append('ImageUrl', postApiAdBannerCreateUpdateAdBannerBody.ImageUrl)
 }
if(postApiAdBannerCreateUpdateAdBannerBody.IsActive !== undefined) {
 formData.append('IsActive', postApiAdBannerCreateUpdateAdBannerBody.IsActive.toString())
 }
if(postApiAdBannerCreateUpdateAdBannerBody.File !== undefined) {
 formData.append('File', postApiAdBannerCreateUpdateAdBannerBody.File)
 }

      return customInstance<boolean>(
      {url: `/api/AdBanner/createUpdateAdBanner`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getPostApiAdBannerCreateUpdateAdBannerMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdBannerCreateUpdateAdBanner>>, TError,{data: PostApiAdBannerCreateUpdateAdBannerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAdBannerCreateUpdateAdBanner>>, TError,{data: PostApiAdBannerCreateUpdateAdBannerBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAdBannerCreateUpdateAdBanner>>, {data: PostApiAdBannerCreateUpdateAdBannerBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiAdBannerCreateUpdateAdBanner(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiAdBannerCreateUpdateAdBannerMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAdBannerCreateUpdateAdBanner>>>
    export type PostApiAdBannerCreateUpdateAdBannerMutationBody = PostApiAdBannerCreateUpdateAdBannerBody
    export type PostApiAdBannerCreateUpdateAdBannerMutationError = ErrorType<unknown>

    export const usePostApiAdBannerCreateUpdateAdBanner = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAdBannerCreateUpdateAdBanner>>, TError,{data: PostApiAdBannerCreateUpdateAdBannerBody}, TContext>, }
) => {
    
      const mutationOptions = getPostApiAdBannerCreateUpdateAdBannerMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiAdBannerGetByAdBannerId = (
    params?: GetApiAdBannerGetByAdBannerIdParams,
 signal?: AbortSignal
) => {
      return customInstance<AdBannerResponse>(
      {url: `/api/AdBanner/getByAdBannerId`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiAdBannerGetByAdBannerIdQueryKey = (params?: GetApiAdBannerGetByAdBannerIdParams,) => [`/api/AdBanner/getByAdBannerId`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiAdBannerGetByAdBannerIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdBannerGetByAdBannerId>>, TError = ErrorType<unknown>>(params?: GetApiAdBannerGetByAdBannerIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAdBannerGetByAdBannerId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAdBannerGetByAdBannerId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdBannerGetByAdBannerIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdBannerGetByAdBannerId>>> = ({ signal }) => getApiAdBannerGetByAdBannerId(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAdBannerGetByAdBannerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdBannerGetByAdBannerId>>>
export type GetApiAdBannerGetByAdBannerIdQueryError = ErrorType<unknown>

export const useGetApiAdBannerGetByAdBannerId = <TData = Awaited<ReturnType<typeof getApiAdBannerGetByAdBannerId>>, TError = ErrorType<unknown>>(
 params?: GetApiAdBannerGetByAdBannerIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAdBannerGetByAdBannerId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAdBannerGetByAdBannerIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiAdBannerGetAdBanners = (
    params?: GetApiAdBannerGetAdBannersParams,
 signal?: AbortSignal
) => {
      return customInstance<AdBannerPaginatedResponse>(
      {url: `/api/AdBanner/getAdBanners`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiAdBannerGetAdBannersQueryKey = (params?: GetApiAdBannerGetAdBannersParams,) => [`/api/AdBanner/getAdBanners`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiAdBannerGetAdBannersQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdBannerGetAdBanners>>, TError = ErrorType<unknown>>(params?: GetApiAdBannerGetAdBannersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAdBannerGetAdBanners>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiAdBannerGetAdBanners>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdBannerGetAdBannersQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdBannerGetAdBanners>>> = ({ signal }) => getApiAdBannerGetAdBanners(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiAdBannerGetAdBannersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdBannerGetAdBanners>>>
export type GetApiAdBannerGetAdBannersQueryError = ErrorType<unknown>

export const useGetApiAdBannerGetAdBanners = <TData = Awaited<ReturnType<typeof getApiAdBannerGetAdBanners>>, TError = ErrorType<unknown>>(
 params?: GetApiAdBannerGetAdBannersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAdBannerGetAdBanners>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAdBannerGetAdBannersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const putApiAdBannerDeleteAdBanner = (
    params?: PutApiAdBannerDeleteAdBannerParams,
 ) => {
      return customInstance<string>(
      {url: `/api/AdBanner/deleteAdBanner`, method: 'put',
        params
    },
      );
    }
  


export const getPutApiAdBannerDeleteAdBannerMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAdBannerDeleteAdBanner>>, TError,{params?: PutApiAdBannerDeleteAdBannerParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiAdBannerDeleteAdBanner>>, TError,{params?: PutApiAdBannerDeleteAdBannerParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiAdBannerDeleteAdBanner>>, {params?: PutApiAdBannerDeleteAdBannerParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiAdBannerDeleteAdBanner(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutApiAdBannerDeleteAdBannerMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAdBannerDeleteAdBanner>>>
    
    export type PutApiAdBannerDeleteAdBannerMutationError = ErrorType<unknown>

    export const usePutApiAdBannerDeleteAdBanner = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAdBannerDeleteAdBanner>>, TError,{params?: PutApiAdBannerDeleteAdBannerParams}, TContext>, }
) => {
    
      const mutationOptions = getPutApiAdBannerDeleteAdBannerMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary GetAllApiKeys
 */
export const getApiApiKeyGetallapikey = (
    
 signal?: AbortSignal
) => {
      return customInstance<void>(
      {url: `/api/ApiKey/getallapikey`, method: 'get', signal
    },
      );
    }
  

export const getGetApiApiKeyGetallapikeyQueryKey = () => [`/api/ApiKey/getallapikey`] as const;
  

    
export const getGetApiApiKeyGetallapikeyQueryOptions = <TData = Awaited<ReturnType<typeof getApiApiKeyGetallapikey>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiApiKeyGetallapikey>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiApiKeyGetallapikey>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApiKeyGetallapikeyQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApiKeyGetallapikey>>> = ({ signal }) => getApiApiKeyGetallapikey(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiApiKeyGetallapikeyQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApiKeyGetallapikey>>>
export type GetApiApiKeyGetallapikeyQueryError = ErrorType<unknown>

export const useGetApiApiKeyGetallapikey = <TData = Awaited<ReturnType<typeof getApiApiKeyGetallapikey>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiApiKeyGetallapikey>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiApiKeyGetallapikeyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiArEnTranslationGetarentranslationbyid = (
    params?: GetApiArEnTranslationGetarentranslationbyidParams,
 signal?: AbortSignal
) => {
      return customInstance<ArEnTranslation>(
      {url: `/api/ArEnTranslation/getarentranslationbyid`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiArEnTranslationGetarentranslationbyidQueryKey = (params?: GetApiArEnTranslationGetarentranslationbyidParams,) => [`/api/ArEnTranslation/getarentranslationbyid`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiArEnTranslationGetarentranslationbyidQueryOptions = <TData = Awaited<ReturnType<typeof getApiArEnTranslationGetarentranslationbyid>>, TError = ErrorType<unknown>>(params?: GetApiArEnTranslationGetarentranslationbyidParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiArEnTranslationGetarentranslationbyid>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiArEnTranslationGetarentranslationbyid>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiArEnTranslationGetarentranslationbyidQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiArEnTranslationGetarentranslationbyid>>> = ({ signal }) => getApiArEnTranslationGetarentranslationbyid(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiArEnTranslationGetarentranslationbyidQueryResult = NonNullable<Awaited<ReturnType<typeof getApiArEnTranslationGetarentranslationbyid>>>
export type GetApiArEnTranslationGetarentranslationbyidQueryError = ErrorType<unknown>

export const useGetApiArEnTranslationGetarentranslationbyid = <TData = Awaited<ReturnType<typeof getApiArEnTranslationGetarentranslationbyid>>, TError = ErrorType<unknown>>(
 params?: GetApiArEnTranslationGetarentranslationbyidParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiArEnTranslationGetarentranslationbyid>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiArEnTranslationGetarentranslationbyidQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary Getrtos
 */
export const getApiArEnTranslationTranslate = (
    
 signal?: AbortSignal
) => {
      return customInstance<ArEnTranslation[]>(
      {url: `/api/ArEnTranslation/translate`, method: 'get', signal
    },
      );
    }
  

export const getGetApiArEnTranslationTranslateQueryKey = () => [`/api/ArEnTranslation/translate`] as const;
  

    
export const getGetApiArEnTranslationTranslateQueryOptions = <TData = Awaited<ReturnType<typeof getApiArEnTranslationTranslate>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiArEnTranslationTranslate>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiArEnTranslationTranslate>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiArEnTranslationTranslateQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiArEnTranslationTranslate>>> = ({ signal }) => getApiArEnTranslationTranslate(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiArEnTranslationTranslateQueryResult = NonNullable<Awaited<ReturnType<typeof getApiArEnTranslationTranslate>>>
export type GetApiArEnTranslationTranslateQueryError = ErrorType<unknown>

export const useGetApiArEnTranslationTranslate = <TData = Awaited<ReturnType<typeof getApiArEnTranslationTranslate>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiArEnTranslationTranslate>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiArEnTranslationTranslateQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary Create
 */
export const postApiArEnTranslationCreate = (
    arEnTranslation: ArEnTranslation,
 ) => {
      return customInstance<ArEnTranslation>(
      {url: `/api/ArEnTranslation/create`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: arEnTranslation
    },
      );
    }
  


export const getPostApiArEnTranslationCreateMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiArEnTranslationCreate>>, TError,{data: ArEnTranslation}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiArEnTranslationCreate>>, TError,{data: ArEnTranslation}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiArEnTranslationCreate>>, {data: ArEnTranslation}> = (props) => {
          const {data} = props ?? {};

          return  postApiArEnTranslationCreate(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiArEnTranslationCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiArEnTranslationCreate>>>
    export type PostApiArEnTranslationCreateMutationBody = ArEnTranslation
    export type PostApiArEnTranslationCreateMutationError = ErrorType<unknown>

    export const usePostApiArEnTranslationCreate = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiArEnTranslationCreate>>, TError,{data: ArEnTranslation}, TContext>, }
) => {
    
      const mutationOptions = getPostApiArEnTranslationCreateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update
 */
export const putApiArEnTranslationUpdate = (
    arEnTranslation: ArEnTranslation,
 ) => {
      return customInstance<ArEnTranslation>(
      {url: `/api/ArEnTranslation/update`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: arEnTranslation
    },
      );
    }
  


export const getPutApiArEnTranslationUpdateMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiArEnTranslationUpdate>>, TError,{data: ArEnTranslation}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiArEnTranslationUpdate>>, TError,{data: ArEnTranslation}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiArEnTranslationUpdate>>, {data: ArEnTranslation}> = (props) => {
          const {data} = props ?? {};

          return  putApiArEnTranslationUpdate(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutApiArEnTranslationUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof putApiArEnTranslationUpdate>>>
    export type PutApiArEnTranslationUpdateMutationBody = ArEnTranslation
    export type PutApiArEnTranslationUpdateMutationError = ErrorType<unknown>

    export const usePutApiArEnTranslationUpdate = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiArEnTranslationUpdate>>, TError,{data: ArEnTranslation}, TContext>, }
) => {
    
      const mutationOptions = getPutApiArEnTranslationUpdateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete
 */
export const deleteApiArEnTranslationDelete = (
    params?: DeleteApiArEnTranslationDeleteParams,
 ) => {
      return customInstance<boolean>(
      {url: `/api/ArEnTranslation/Delete`, method: 'delete',
        params
    },
      );
    }
  


export const getDeleteApiArEnTranslationDeleteMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiArEnTranslationDelete>>, TError,{params?: DeleteApiArEnTranslationDeleteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiArEnTranslationDelete>>, TError,{params?: DeleteApiArEnTranslationDeleteParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiArEnTranslationDelete>>, {params?: DeleteApiArEnTranslationDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiArEnTranslationDelete(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiArEnTranslationDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiArEnTranslationDelete>>>
    
    export type DeleteApiArEnTranslationDeleteMutationError = ErrorType<unknown>

    export const useDeleteApiArEnTranslationDelete = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiArEnTranslationDelete>>, TError,{params?: DeleteApiArEnTranslationDeleteParams}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiArEnTranslationDeleteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiCommonFetchGovernates = (
    
 signal?: AbortSignal
) => {
      return customInstance<Governorate[]>(
      {url: `/api/Common/fetchGovernates`, method: 'get', signal
    },
      );
    }
  

export const getGetApiCommonFetchGovernatesQueryKey = () => [`/api/Common/fetchGovernates`] as const;
  

    
export const getGetApiCommonFetchGovernatesQueryOptions = <TData = Awaited<ReturnType<typeof getApiCommonFetchGovernates>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchGovernates>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchGovernates>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCommonFetchGovernatesQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCommonFetchGovernates>>> = ({ signal }) => getApiCommonFetchGovernates(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCommonFetchGovernatesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCommonFetchGovernates>>>
export type GetApiCommonFetchGovernatesQueryError = ErrorType<unknown>

export const useGetApiCommonFetchGovernates = <TData = Awaited<ReturnType<typeof getApiCommonFetchGovernates>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchGovernates>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCommonFetchGovernatesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCommonFetchCityByGovernateById = (
    params?: GetApiCommonFetchCityByGovernateByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<City[]>(
      {url: `/api/Common/fetchCityByGovernateById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCommonFetchCityByGovernateByIdQueryKey = (params?: GetApiCommonFetchCityByGovernateByIdParams,) => [`/api/Common/fetchCityByGovernateById`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCommonFetchCityByGovernateByIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCommonFetchCityByGovernateById>>, TError = ErrorType<unknown>>(params?: GetApiCommonFetchCityByGovernateByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchCityByGovernateById>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchCityByGovernateById>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCommonFetchCityByGovernateByIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCommonFetchCityByGovernateById>>> = ({ signal }) => getApiCommonFetchCityByGovernateById(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCommonFetchCityByGovernateByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCommonFetchCityByGovernateById>>>
export type GetApiCommonFetchCityByGovernateByIdQueryError = ErrorType<unknown>

export const useGetApiCommonFetchCityByGovernateById = <TData = Awaited<ReturnType<typeof getApiCommonFetchCityByGovernateById>>, TError = ErrorType<unknown>>(
 params?: GetApiCommonFetchCityByGovernateByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchCityByGovernateById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCommonFetchCityByGovernateByIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCommonFetchVillageByCityId = (
    params?: GetApiCommonFetchVillageByCityIdParams,
 signal?: AbortSignal
) => {
      return customInstance<Village[]>(
      {url: `/api/Common/fetchVillageByCityId`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCommonFetchVillageByCityIdQueryKey = (params?: GetApiCommonFetchVillageByCityIdParams,) => [`/api/Common/fetchVillageByCityId`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCommonFetchVillageByCityIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCommonFetchVillageByCityId>>, TError = ErrorType<unknown>>(params?: GetApiCommonFetchVillageByCityIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchVillageByCityId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchVillageByCityId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCommonFetchVillageByCityIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCommonFetchVillageByCityId>>> = ({ signal }) => getApiCommonFetchVillageByCityId(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCommonFetchVillageByCityIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCommonFetchVillageByCityId>>>
export type GetApiCommonFetchVillageByCityIdQueryError = ErrorType<unknown>

export const useGetApiCommonFetchVillageByCityId = <TData = Awaited<ReturnType<typeof getApiCommonFetchVillageByCityId>>, TError = ErrorType<unknown>>(
 params?: GetApiCommonFetchVillageByCityIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCommonFetchVillageByCityId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCommonFetchVillageByCityIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary This API is used to create or update crop category.
 */
export const postApiCropCreateUpdateCropCategory = (
    postApiCropCreateUpdateCropCategoryBody: PostApiCropCreateUpdateCropCategoryBody,
 ) => {const formData = new FormData();
if(postApiCropCreateUpdateCropCategoryBody.Name !== undefined) {
 formData.append('Name', postApiCropCreateUpdateCropCategoryBody.Name)
 }
if(postApiCropCreateUpdateCropCategoryBody.Description !== undefined) {
 formData.append('Description', postApiCropCreateUpdateCropCategoryBody.Description)
 }
if(postApiCropCreateUpdateCropCategoryBody.Id !== undefined) {
 formData.append('Id', postApiCropCreateUpdateCropCategoryBody.Id)
 }
if(postApiCropCreateUpdateCropCategoryBody.IsActive !== undefined) {
 formData.append('IsActive', postApiCropCreateUpdateCropCategoryBody.IsActive.toString())
 }
if(postApiCropCreateUpdateCropCategoryBody.ImageUrl !== undefined) {
 formData.append('ImageUrl', postApiCropCreateUpdateCropCategoryBody.ImageUrl)
 }
if(postApiCropCreateUpdateCropCategoryBody.File !== undefined) {
 formData.append('File', postApiCropCreateUpdateCropCategoryBody.File)
 }

      return customInstance<string>(
      {url: `/api/Crop/createUpdateCropCategory`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getPostApiCropCreateUpdateCropCategoryMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCategory>>, TError,{data: PostApiCropCreateUpdateCropCategoryBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCategory>>, TError,{data: PostApiCropCreateUpdateCropCategoryBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCategory>>, {data: PostApiCropCreateUpdateCropCategoryBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiCropCreateUpdateCropCategory(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiCropCreateUpdateCropCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCategory>>>
    export type PostApiCropCreateUpdateCropCategoryMutationBody = PostApiCropCreateUpdateCropCategoryBody
    export type PostApiCropCreateUpdateCropCategoryMutationError = ErrorType<unknown>

    export const usePostApiCropCreateUpdateCropCategory = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCategory>>, TError,{data: PostApiCropCreateUpdateCropCategoryBody}, TContext>, }
) => {
    
      const mutationOptions = getPostApiCropCreateUpdateCropCategoryMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiCropCreateUpdateCrop = (
    postApiCropCreateUpdateCropBody: PostApiCropCreateUpdateCropBody,
 ) => {const formData = new FormData();
if(postApiCropCreateUpdateCropBody.Id !== undefined) {
 formData.append('Id', postApiCropCreateUpdateCropBody.Id)
 }
if(postApiCropCreateUpdateCropBody.Name !== undefined) {
 formData.append('Name', postApiCropCreateUpdateCropBody.Name)
 }
if(postApiCropCreateUpdateCropBody.Description !== undefined) {
 formData.append('Description', postApiCropCreateUpdateCropBody.Description)
 }
if(postApiCropCreateUpdateCropBody.ImageUrl !== undefined) {
 formData.append('ImageUrl', postApiCropCreateUpdateCropBody.ImageUrl)
 }
if(postApiCropCreateUpdateCropBody.ColorCode !== undefined) {
 formData.append('ColorCode', postApiCropCreateUpdateCropBody.ColorCode)
 }
if(postApiCropCreateUpdateCropBody.CropCategoryId !== undefined) {
 formData.append('CropCategoryId', postApiCropCreateUpdateCropBody.CropCategoryId)
 }
if(postApiCropCreateUpdateCropBody.IsActive !== undefined) {
 formData.append('IsActive', postApiCropCreateUpdateCropBody.IsActive.toString())
 }
if(postApiCropCreateUpdateCropBody.File !== undefined) {
 formData.append('File', postApiCropCreateUpdateCropBody.File)
 }

      return customInstance<string>(
      {url: `/api/Crop/createUpdateCrop`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getPostApiCropCreateUpdateCropMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCrop>>, TError,{data: PostApiCropCreateUpdateCropBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCrop>>, TError,{data: PostApiCropCreateUpdateCropBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCropCreateUpdateCrop>>, {data: PostApiCropCreateUpdateCropBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiCropCreateUpdateCrop(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiCropCreateUpdateCropMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCropCreateUpdateCrop>>>
    export type PostApiCropCreateUpdateCropMutationBody = PostApiCropCreateUpdateCropBody
    export type PostApiCropCreateUpdateCropMutationError = ErrorType<unknown>

    export const usePostApiCropCreateUpdateCrop = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCrop>>, TError,{data: PostApiCropCreateUpdateCropBody}, TContext>, }
) => {
    
      const mutationOptions = getPostApiCropCreateUpdateCropMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiCropCreateCultivationDetails = (
    cultivationDetailRequest: CultivationDetailRequest[],
 ) => {
      return customInstance<boolean>(
      {url: `/api/Crop/createCultivationDetails`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cultivationDetailRequest
    },
      );
    }
  


export const getPostApiCropCreateCultivationDetailsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateCultivationDetails>>, TError,{data: CultivationDetailRequest[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateCultivationDetails>>, TError,{data: CultivationDetailRequest[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCropCreateCultivationDetails>>, {data: CultivationDetailRequest[]}> = (props) => {
          const {data} = props ?? {};

          return  postApiCropCreateCultivationDetails(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiCropCreateCultivationDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCropCreateCultivationDetails>>>
    export type PostApiCropCreateCultivationDetailsMutationBody = CultivationDetailRequest[]
    export type PostApiCropCreateCultivationDetailsMutationError = ErrorType<unknown>

    export const usePostApiCropCreateCultivationDetails = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateCultivationDetails>>, TError,{data: CultivationDetailRequest[]}, TContext>, }
) => {
    
      const mutationOptions = getPostApiCropCreateCultivationDetailsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiCropCreateFarmCrops = (
    farmCropsRequest: FarmCropsRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Crop/createFarmCrops`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: farmCropsRequest
    },
      );
    }
  


export const getPostApiCropCreateFarmCropsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateFarmCrops>>, TError,{data: FarmCropsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateFarmCrops>>, TError,{data: FarmCropsRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCropCreateFarmCrops>>, {data: FarmCropsRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiCropCreateFarmCrops(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiCropCreateFarmCropsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCropCreateFarmCrops>>>
    export type PostApiCropCreateFarmCropsMutationBody = FarmCropsRequest
    export type PostApiCropCreateFarmCropsMutationError = ErrorType<unknown>

    export const usePostApiCropCreateFarmCrops = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateFarmCrops>>, TError,{data: FarmCropsRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostApiCropCreateFarmCropsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiCropGetCropCategoryById = (
    params?: GetApiCropGetCropCategoryByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<CropCategoryResponse>(
      {url: `/api/Crop/getCropCategoryById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCropGetCropCategoryByIdQueryKey = (params?: GetApiCropGetCropCategoryByIdParams,) => [`/api/Crop/getCropCategoryById`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCropGetCropCategoryByIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropGetCropCategoryById>>, TError = ErrorType<unknown>>(params?: GetApiCropGetCropCategoryByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropCategoryById>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropCategoryById>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropGetCropCategoryByIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropGetCropCategoryById>>> = ({ signal }) => getApiCropGetCropCategoryById(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropGetCropCategoryByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropGetCropCategoryById>>>
export type GetApiCropGetCropCategoryByIdQueryError = ErrorType<unknown>

export const useGetApiCropGetCropCategoryById = <TData = Awaited<ReturnType<typeof getApiCropGetCropCategoryById>>, TError = ErrorType<unknown>>(
 params?: GetApiCropGetCropCategoryByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropCategoryById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropGetCropCategoryByIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCropGetCropsByCategoryId = (
    params?: GetApiCropGetCropsByCategoryIdParams,
 signal?: AbortSignal
) => {
      return customInstance<CropBasicResponse[]>(
      {url: `/api/Crop/getCropsByCategoryId`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCropGetCropsByCategoryIdQueryKey = (params?: GetApiCropGetCropsByCategoryIdParams,) => [`/api/Crop/getCropsByCategoryId`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCropGetCropsByCategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropGetCropsByCategoryId>>, TError = ErrorType<unknown>>(params?: GetApiCropGetCropsByCategoryIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropsByCategoryId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropsByCategoryId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropGetCropsByCategoryIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropGetCropsByCategoryId>>> = ({ signal }) => getApiCropGetCropsByCategoryId(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropGetCropsByCategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropGetCropsByCategoryId>>>
export type GetApiCropGetCropsByCategoryIdQueryError = ErrorType<unknown>

export const useGetApiCropGetCropsByCategoryId = <TData = Awaited<ReturnType<typeof getApiCropGetCropsByCategoryId>>, TError = ErrorType<unknown>>(
 params?: GetApiCropGetCropsByCategoryIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropsByCategoryId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropGetCropsByCategoryIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCropGetCropCategories = (
    params?: GetApiCropGetCropCategoriesParams,
 signal?: AbortSignal
) => {
      return customInstance<CropCategoryPaginatedResponse>(
      {url: `/api/Crop/getCropCategories`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCropGetCropCategoriesQueryKey = (params?: GetApiCropGetCropCategoriesParams,) => [`/api/Crop/getCropCategories`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCropGetCropCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropGetCropCategories>>, TError = ErrorType<unknown>>(params?: GetApiCropGetCropCategoriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropCategories>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropCategories>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropGetCropCategoriesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropGetCropCategories>>> = ({ signal }) => getApiCropGetCropCategories(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropGetCropCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropGetCropCategories>>>
export type GetApiCropGetCropCategoriesQueryError = ErrorType<unknown>

export const useGetApiCropGetCropCategories = <TData = Awaited<ReturnType<typeof getApiCropGetCropCategories>>, TError = ErrorType<unknown>>(
 params?: GetApiCropGetCropCategoriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropCategories>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropGetCropCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCropGetCropById = (
    params?: GetApiCropGetCropByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<CropResponse>(
      {url: `/api/Crop/getCropById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCropGetCropByIdQueryKey = (params?: GetApiCropGetCropByIdParams,) => [`/api/Crop/getCropById`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCropGetCropByIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropGetCropById>>, TError = ErrorType<unknown>>(params?: GetApiCropGetCropByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropById>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropById>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropGetCropByIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropGetCropById>>> = ({ signal }) => getApiCropGetCropById(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropGetCropByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropGetCropById>>>
export type GetApiCropGetCropByIdQueryError = ErrorType<unknown>

export const useGetApiCropGetCropById = <TData = Awaited<ReturnType<typeof getApiCropGetCropById>>, TError = ErrorType<unknown>>(
 params?: GetApiCropGetCropByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropGetCropByIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCropGetCrops = (
    params?: GetApiCropGetCropsParams,
 signal?: AbortSignal
) => {
      return customInstance<CropPaginatedResponse>(
      {url: `/api/Crop/getCrops`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCropGetCropsQueryKey = (params?: GetApiCropGetCropsParams,) => [`/api/Crop/getCrops`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCropGetCropsQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropGetCrops>>, TError = ErrorType<unknown>>(params?: GetApiCropGetCropsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCrops>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCrops>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropGetCropsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropGetCrops>>> = ({ signal }) => getApiCropGetCrops(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropGetCropsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropGetCrops>>>
export type GetApiCropGetCropsQueryError = ErrorType<unknown>

export const useGetApiCropGetCrops = <TData = Awaited<ReturnType<typeof getApiCropGetCrops>>, TError = ErrorType<unknown>>(
 params?: GetApiCropGetCropsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCrops>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropGetCropsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCropGetCultivationDetailsByFarmId = (
    params?: GetApiCropGetCultivationDetailsByFarmIdParams,
 signal?: AbortSignal
) => {
      return customInstance<FarmCropCultivationResponse>(
      {url: `/api/Crop/getCultivationDetailsByFarmId`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCropGetCultivationDetailsByFarmIdQueryKey = (params?: GetApiCropGetCultivationDetailsByFarmIdParams,) => [`/api/Crop/getCultivationDetailsByFarmId`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCropGetCultivationDetailsByFarmIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropGetCultivationDetailsByFarmId>>, TError = ErrorType<unknown>>(params?: GetApiCropGetCultivationDetailsByFarmIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCultivationDetailsByFarmId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCultivationDetailsByFarmId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropGetCultivationDetailsByFarmIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropGetCultivationDetailsByFarmId>>> = ({ signal }) => getApiCropGetCultivationDetailsByFarmId(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropGetCultivationDetailsByFarmIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropGetCultivationDetailsByFarmId>>>
export type GetApiCropGetCultivationDetailsByFarmIdQueryError = ErrorType<unknown>

export const useGetApiCropGetCultivationDetailsByFarmId = <TData = Awaited<ReturnType<typeof getApiCropGetCultivationDetailsByFarmId>>, TError = ErrorType<unknown>>(
 params?: GetApiCropGetCultivationDetailsByFarmIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCultivationDetailsByFarmId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropGetCultivationDetailsByFarmIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCropGetCropsByFarmId = (
    params?: GetApiCropGetCropsByFarmIdParams,
 signal?: AbortSignal
) => {
      return customInstance<FarmCropsResponse>(
      {url: `/api/Crop/getCropsByFarmId`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCropGetCropsByFarmIdQueryKey = (params?: GetApiCropGetCropsByFarmIdParams,) => [`/api/Crop/getCropsByFarmId`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCropGetCropsByFarmIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropGetCropsByFarmId>>, TError = ErrorType<unknown>>(params?: GetApiCropGetCropsByFarmIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropsByFarmId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropsByFarmId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropGetCropsByFarmIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropGetCropsByFarmId>>> = ({ signal }) => getApiCropGetCropsByFarmId(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropGetCropsByFarmIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropGetCropsByFarmId>>>
export type GetApiCropGetCropsByFarmIdQueryError = ErrorType<unknown>

export const useGetApiCropGetCropsByFarmId = <TData = Awaited<ReturnType<typeof getApiCropGetCropsByFarmId>>, TError = ErrorType<unknown>>(
 params?: GetApiCropGetCropsByFarmIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropGetCropsByFarmId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropGetCropsByFarmIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary Delete crop by crop id
 */
export const deleteApiCropDeleteCrop = (
    params?: DeleteApiCropDeleteCropParams,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Crop/deleteCrop`, method: 'delete',
        params
    },
      );
    }
  


export const getDeleteApiCropDeleteCropMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeleteCrop>>, TError,{params?: DeleteApiCropDeleteCropParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeleteCrop>>, TError,{params?: DeleteApiCropDeleteCropParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCropDeleteCrop>>, {params?: DeleteApiCropDeleteCropParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiCropDeleteCrop(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCropDeleteCropMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCropDeleteCrop>>>
    
    export type DeleteApiCropDeleteCropMutationError = ErrorType<unknown>

    export const useDeleteApiCropDeleteCrop = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeleteCrop>>, TError,{params?: DeleteApiCropDeleteCropParams}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiCropDeleteCropMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete crop category by id
 */
export const deleteApiCropDeleteCropCategory = (
    params?: DeleteApiCropDeleteCropCategoryParams,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Crop/deleteCropCategory`, method: 'delete',
        params
    },
      );
    }
  


export const getDeleteApiCropDeleteCropCategoryMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeleteCropCategory>>, TError,{params?: DeleteApiCropDeleteCropCategoryParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeleteCropCategory>>, TError,{params?: DeleteApiCropDeleteCropCategoryParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCropDeleteCropCategory>>, {params?: DeleteApiCropDeleteCropCategoryParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiCropDeleteCropCategory(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCropDeleteCropCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCropDeleteCropCategory>>>
    
    export type DeleteApiCropDeleteCropCategoryMutationError = ErrorType<unknown>

    export const useDeleteApiCropDeleteCropCategory = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeleteCropCategory>>, TError,{params?: DeleteApiCropDeleteCropCategoryParams}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiCropDeleteCropCategoryMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiCropCreateUpdateCropCalendar = (
    cropIdsActivitiesRequest: CropIdsActivitiesRequest,
 ) => {
      return customInstance<string>(
      {url: `/api/Crop/createUpdateCropCalendar`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cropIdsActivitiesRequest
    },
      );
    }
  


export const getPostApiCropCreateUpdateCropCalendarMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCalendar>>, TError,{data: CropIdsActivitiesRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCalendar>>, TError,{data: CropIdsActivitiesRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCalendar>>, {data: CropIdsActivitiesRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiCropCreateUpdateCropCalendar(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiCropCreateUpdateCropCalendarMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCalendar>>>
    export type PostApiCropCreateUpdateCropCalendarMutationBody = CropIdsActivitiesRequest
    export type PostApiCropCreateUpdateCropCalendarMutationError = ErrorType<unknown>

    export const usePostApiCropCreateUpdateCropCalendar = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropCreateUpdateCropCalendar>>, TError,{data: CropIdsActivitiesRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostApiCropCreateUpdateCropCalendarMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary This is currently being used by admin portal
 */
export const getApiCropFetchCropCalendarActivities = (
    params?: GetApiCropFetchCropCalendarActivitiesParams,
 signal?: AbortSignal
) => {
      return customInstance<UpdatedCropCalendarActivityPaginatedResponse>(
      {url: `/api/Crop/fetchCropCalendarActivities`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiCropFetchCropCalendarActivitiesQueryKey = (params?: GetApiCropFetchCropCalendarActivitiesParams,) => [`/api/Crop/fetchCropCalendarActivities`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiCropFetchCropCalendarActivitiesQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropFetchCropCalendarActivities>>, TError = ErrorType<unknown>>(params?: GetApiCropFetchCropCalendarActivitiesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchCropCalendarActivities>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchCropCalendarActivities>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropFetchCropCalendarActivitiesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropFetchCropCalendarActivities>>> = ({ signal }) => getApiCropFetchCropCalendarActivities(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropFetchCropCalendarActivitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropFetchCropCalendarActivities>>>
export type GetApiCropFetchCropCalendarActivitiesQueryError = ErrorType<unknown>

export const useGetApiCropFetchCropCalendarActivities = <TData = Awaited<ReturnType<typeof getApiCropFetchCropCalendarActivities>>, TError = ErrorType<unknown>>(
 params?: GetApiCropFetchCropCalendarActivitiesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchCropCalendarActivities>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropFetchCropCalendarActivitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary Used by admin portal
 */
export const putApiCropDeleteCropCalendarActivity = (
    params?: PutApiCropDeleteCropCalendarActivityParams,
 ) => {
      return customInstance<string>(
      {url: `/api/Crop/deleteCropCalendarActivity`, method: 'put',
        params
    },
      );
    }
  


export const getPutApiCropDeleteCropCalendarActivityMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCropDeleteCropCalendarActivity>>, TError,{params?: PutApiCropDeleteCropCalendarActivityParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiCropDeleteCropCalendarActivity>>, TError,{params?: PutApiCropDeleteCropCalendarActivityParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCropDeleteCropCalendarActivity>>, {params?: PutApiCropDeleteCropCalendarActivityParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiCropDeleteCropCalendarActivity(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutApiCropDeleteCropCalendarActivityMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCropDeleteCropCalendarActivity>>>
    
    export type PutApiCropDeleteCropCalendarActivityMutationError = ErrorType<unknown>

    export const usePutApiCropDeleteCropCalendarActivity = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCropDeleteCropCalendarActivity>>, TError,{params?: PutApiCropDeleteCropCalendarActivityParams}, TContext>, }
) => {
    
      const mutationOptions = getPutApiCropDeleteCropCalendarActivityMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiCropAddPhaseSubPhase = (
    phaseSubPhaseRequest: PhaseSubPhaseRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Crop/addPhaseSubPhase`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: phaseSubPhaseRequest
    },
      );
    }
  


export const getPostApiCropAddPhaseSubPhaseMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropAddPhaseSubPhase>>, TError,{data: PhaseSubPhaseRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCropAddPhaseSubPhase>>, TError,{data: PhaseSubPhaseRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCropAddPhaseSubPhase>>, {data: PhaseSubPhaseRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiCropAddPhaseSubPhase(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiCropAddPhaseSubPhaseMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCropAddPhaseSubPhase>>>
    export type PostApiCropAddPhaseSubPhaseMutationBody = PhaseSubPhaseRequest
    export type PostApiCropAddPhaseSubPhaseMutationError = ErrorType<unknown>

    export const usePostApiCropAddPhaseSubPhase = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCropAddPhaseSubPhase>>, TError,{data: PhaseSubPhaseRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostApiCropAddPhaseSubPhaseMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiCropFetchPhase = (
    
 signal?: AbortSignal
) => {
      return customInstance<PhaseSubPhaseResponse[]>(
      {url: `/api/Crop/fetchPhase`, method: 'get', signal
    },
      );
    }
  

export const getGetApiCropFetchPhaseQueryKey = () => [`/api/Crop/fetchPhase`] as const;
  

    
export const getGetApiCropFetchPhaseQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropFetchPhase>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchPhase>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchPhase>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropFetchPhaseQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropFetchPhase>>> = ({ signal }) => getApiCropFetchPhase(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropFetchPhaseQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropFetchPhase>>>
export type GetApiCropFetchPhaseQueryError = ErrorType<unknown>

export const useGetApiCropFetchPhase = <TData = Awaited<ReturnType<typeof getApiCropFetchPhase>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchPhase>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropFetchPhaseQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCropFetchSubPhase = (
    
 signal?: AbortSignal
) => {
      return customInstance<PhaseSubPhaseResponse[]>(
      {url: `/api/Crop/fetchSubPhase`, method: 'get', signal
    },
      );
    }
  

export const getGetApiCropFetchSubPhaseQueryKey = () => [`/api/Crop/fetchSubPhase`] as const;
  

    
export const getGetApiCropFetchSubPhaseQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropFetchSubPhase>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchSubPhase>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchSubPhase>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropFetchSubPhaseQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropFetchSubPhase>>> = ({ signal }) => getApiCropFetchSubPhase(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropFetchSubPhaseQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropFetchSubPhase>>>
export type GetApiCropFetchSubPhaseQueryError = ErrorType<unknown>

export const useGetApiCropFetchSubPhase = <TData = Awaited<ReturnType<typeof getApiCropFetchSubPhase>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchSubPhase>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropFetchSubPhaseQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiCropFetchActivities = (
    
 signal?: AbortSignal
) => {
      return customInstance<Activity[]>(
      {url: `/api/Crop/fetchActivities`, method: 'get', signal
    },
      );
    }
  

export const getGetApiCropFetchActivitiesQueryKey = () => [`/api/Crop/fetchActivities`] as const;
  

    
export const getGetApiCropFetchActivitiesQueryOptions = <TData = Awaited<ReturnType<typeof getApiCropFetchActivities>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchActivities>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchActivities>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCropFetchActivitiesQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCropFetchActivities>>> = ({ signal }) => getApiCropFetchActivities(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiCropFetchActivitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCropFetchActivities>>>
export type GetApiCropFetchActivitiesQueryError = ErrorType<unknown>

export const useGetApiCropFetchActivities = <TData = Awaited<ReturnType<typeof getApiCropFetchActivities>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCropFetchActivities>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCropFetchActivitiesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const deleteApiCropDeletePhaseActivity = (
    params?: DeleteApiCropDeletePhaseActivityParams,
 ) => {
      return customInstance<string>(
      {url: `/api/Crop/deletePhaseActivity`, method: 'delete',
        params
    },
      );
    }
  


export const getDeleteApiCropDeletePhaseActivityMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeletePhaseActivity>>, TError,{params?: DeleteApiCropDeletePhaseActivityParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeletePhaseActivity>>, TError,{params?: DeleteApiCropDeletePhaseActivityParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCropDeletePhaseActivity>>, {params?: DeleteApiCropDeletePhaseActivityParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiCropDeletePhaseActivity(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCropDeletePhaseActivityMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCropDeletePhaseActivity>>>
    
    export type DeleteApiCropDeletePhaseActivityMutationError = ErrorType<unknown>

    export const useDeleteApiCropDeletePhaseActivity = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCropDeletePhaseActivity>>, TError,{params?: DeleteApiCropDeletePhaseActivityParams}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiCropDeletePhaseActivityMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiFarmCreateUpdateFarm = (
    farmRequest: FarmRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Farm/createUpdateFarm`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: farmRequest
    },
      );
    }
  


export const getPostApiFarmCreateUpdateFarmMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFarmCreateUpdateFarm>>, TError,{data: FarmRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiFarmCreateUpdateFarm>>, TError,{data: FarmRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFarmCreateUpdateFarm>>, {data: FarmRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiFarmCreateUpdateFarm(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiFarmCreateUpdateFarmMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFarmCreateUpdateFarm>>>
    export type PostApiFarmCreateUpdateFarmMutationBody = FarmRequest
    export type PostApiFarmCreateUpdateFarmMutationError = ErrorType<unknown>

    export const usePostApiFarmCreateUpdateFarm = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFarmCreateUpdateFarm>>, TError,{data: FarmRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostApiFarmCreateUpdateFarmMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiFarmGetFarmById = (
    params?: GetApiFarmGetFarmByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<FarmResponse>(
      {url: `/api/Farm/getFarmById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiFarmGetFarmByIdQueryKey = (params?: GetApiFarmGetFarmByIdParams,) => [`/api/Farm/getFarmById`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiFarmGetFarmByIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiFarmGetFarmById>>, TError = ErrorType<unknown>>(params?: GetApiFarmGetFarmByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFarmGetFarmById>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiFarmGetFarmById>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFarmGetFarmByIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFarmGetFarmById>>> = ({ signal }) => getApiFarmGetFarmById(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiFarmGetFarmByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFarmGetFarmById>>>
export type GetApiFarmGetFarmByIdQueryError = ErrorType<unknown>

export const useGetApiFarmGetFarmById = <TData = Awaited<ReturnType<typeof getApiFarmGetFarmById>>, TError = ErrorType<unknown>>(
 params?: GetApiFarmGetFarmByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFarmGetFarmById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiFarmGetFarmByIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiFarmGetFarms = (
    params?: GetApiFarmGetFarmsParams,
 signal?: AbortSignal
) => {
      return customInstance<FarmResponse[]>(
      {url: `/api/Farm/getFarms`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiFarmGetFarmsQueryKey = (params?: GetApiFarmGetFarmsParams,) => [`/api/Farm/getFarms`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiFarmGetFarmsQueryOptions = <TData = Awaited<ReturnType<typeof getApiFarmGetFarms>>, TError = ErrorType<unknown>>(params?: GetApiFarmGetFarmsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFarmGetFarms>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiFarmGetFarms>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFarmGetFarmsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFarmGetFarms>>> = ({ signal }) => getApiFarmGetFarms(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiFarmGetFarmsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFarmGetFarms>>>
export type GetApiFarmGetFarmsQueryError = ErrorType<unknown>

export const useGetApiFarmGetFarms = <TData = Awaited<ReturnType<typeof getApiFarmGetFarms>>, TError = ErrorType<unknown>>(
 params?: GetApiFarmGetFarmsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFarmGetFarms>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiFarmGetFarmsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const deleteApiFarmDeleteFarmById = (
    params?: DeleteApiFarmDeleteFarmByIdParams,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Farm/deleteFarmById`, method: 'delete',
        params
    },
      );
    }
  


export const getDeleteApiFarmDeleteFarmByIdMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFarmDeleteFarmById>>, TError,{params?: DeleteApiFarmDeleteFarmByIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiFarmDeleteFarmById>>, TError,{params?: DeleteApiFarmDeleteFarmByIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiFarmDeleteFarmById>>, {params?: DeleteApiFarmDeleteFarmByIdParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiFarmDeleteFarmById(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiFarmDeleteFarmByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiFarmDeleteFarmById>>>
    
    export type DeleteApiFarmDeleteFarmByIdMutationError = ErrorType<unknown>

    export const useDeleteApiFarmDeleteFarmById = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFarmDeleteFarmById>>, TError,{params?: DeleteApiFarmDeleteFarmByIdParams}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiFarmDeleteFarmByIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return true or false based on farm count of the user
 */
export const getApiFarmIsFarmAdded = (
    
 signal?: AbortSignal
) => {
      return customInstance<FarmExists>(
      {url: `/api/Farm/isFarmAdded`, method: 'get', signal
    },
      );
    }
  

export const getGetApiFarmIsFarmAddedQueryKey = () => [`/api/Farm/isFarmAdded`] as const;
  

    
export const getGetApiFarmIsFarmAddedQueryOptions = <TData = Awaited<ReturnType<typeof getApiFarmIsFarmAdded>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFarmIsFarmAdded>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiFarmIsFarmAdded>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFarmIsFarmAddedQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFarmIsFarmAdded>>> = ({ signal }) => getApiFarmIsFarmAdded(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiFarmIsFarmAddedQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFarmIsFarmAdded>>>
export type GetApiFarmIsFarmAddedQueryError = ErrorType<unknown>

export const useGetApiFarmIsFarmAdded = <TData = Awaited<ReturnType<typeof getApiFarmIsFarmAdded>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFarmIsFarmAdded>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiFarmIsFarmAddedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary Create or Update Governorate
 */
export const postApiGovernorateCreateUpdateGovernorate = (
    governorateRequest: GovernorateRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/api/Governorate/createUpdateGovernorate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: governorateRequest
    },
      );
    }
  


export const getPostApiGovernorateCreateUpdateGovernorateMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGovernorateCreateUpdateGovernorate>>, TError,{data: GovernorateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiGovernorateCreateUpdateGovernorate>>, TError,{data: GovernorateRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGovernorateCreateUpdateGovernorate>>, {data: GovernorateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiGovernorateCreateUpdateGovernorate(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiGovernorateCreateUpdateGovernorateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGovernorateCreateUpdateGovernorate>>>
    export type PostApiGovernorateCreateUpdateGovernorateMutationBody = GovernorateRequest
    export type PostApiGovernorateCreateUpdateGovernorateMutationError = ErrorType<unknown>

    export const usePostApiGovernorateCreateUpdateGovernorate = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGovernorateCreateUpdateGovernorate>>, TError,{data: GovernorateRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostApiGovernorateCreateUpdateGovernorateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Gets governorate by Id.
 */
export const getApiGovernorateGetGovernorateById = (
    params?: GetApiGovernorateGetGovernorateByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<GovernorateResponse>(
      {url: `/api/Governorate/getGovernorateById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiGovernorateGetGovernorateByIdQueryKey = (params?: GetApiGovernorateGetGovernorateByIdParams,) => [`/api/Governorate/getGovernorateById`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiGovernorateGetGovernorateByIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiGovernorateGetGovernorateById>>, TError = ErrorType<unknown>>(params?: GetApiGovernorateGetGovernorateByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGovernorateGetGovernorateById>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiGovernorateGetGovernorateById>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGovernorateGetGovernorateByIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGovernorateGetGovernorateById>>> = ({ signal }) => getApiGovernorateGetGovernorateById(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiGovernorateGetGovernorateByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGovernorateGetGovernorateById>>>
export type GetApiGovernorateGetGovernorateByIdQueryError = ErrorType<unknown>

export const useGetApiGovernorateGetGovernorateById = <TData = Awaited<ReturnType<typeof getApiGovernorateGetGovernorateById>>, TError = ErrorType<unknown>>(
 params?: GetApiGovernorateGetGovernorateByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGovernorateGetGovernorateById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiGovernorateGetGovernorateByIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiGovernorateGetGovernorates = (
    params?: GetApiGovernorateGetGovernoratesParams,
 signal?: AbortSignal
) => {
      return customInstance<GovernorateResponse[]>(
      {url: `/api/Governorate/getGovernorates`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiGovernorateGetGovernoratesQueryKey = (params?: GetApiGovernorateGetGovernoratesParams,) => [`/api/Governorate/getGovernorates`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiGovernorateGetGovernoratesQueryOptions = <TData = Awaited<ReturnType<typeof getApiGovernorateGetGovernorates>>, TError = ErrorType<unknown>>(params?: GetApiGovernorateGetGovernoratesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGovernorateGetGovernorates>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiGovernorateGetGovernorates>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGovernorateGetGovernoratesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGovernorateGetGovernorates>>> = ({ signal }) => getApiGovernorateGetGovernorates(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiGovernorateGetGovernoratesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGovernorateGetGovernorates>>>
export type GetApiGovernorateGetGovernoratesQueryError = ErrorType<unknown>

export const useGetApiGovernorateGetGovernorates = <TData = Awaited<ReturnType<typeof getApiGovernorateGetGovernorates>>, TError = ErrorType<unknown>>(
 params?: GetApiGovernorateGetGovernoratesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGovernorateGetGovernorates>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiGovernorateGetGovernoratesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const postApiIrrigationTypeCreateUpdateIrrigationType = (
    irrigationTypeRequest: IrrigationTypeRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/api/IrrigationType/createUpdateIrrigationType`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: irrigationTypeRequest
    },
      );
    }
  


export const getPostApiIrrigationTypeCreateUpdateIrrigationTypeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiIrrigationTypeCreateUpdateIrrigationType>>, TError,{data: IrrigationTypeRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiIrrigationTypeCreateUpdateIrrigationType>>, TError,{data: IrrigationTypeRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiIrrigationTypeCreateUpdateIrrigationType>>, {data: IrrigationTypeRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiIrrigationTypeCreateUpdateIrrigationType(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiIrrigationTypeCreateUpdateIrrigationTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiIrrigationTypeCreateUpdateIrrigationType>>>
    export type PostApiIrrigationTypeCreateUpdateIrrigationTypeMutationBody = IrrigationTypeRequest
    export type PostApiIrrigationTypeCreateUpdateIrrigationTypeMutationError = ErrorType<unknown>

    export const usePostApiIrrigationTypeCreateUpdateIrrigationType = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiIrrigationTypeCreateUpdateIrrigationType>>, TError,{data: IrrigationTypeRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostApiIrrigationTypeCreateUpdateIrrigationTypeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiIrrigationTypeGetIrrigationTypeById = (
    params?: GetApiIrrigationTypeGetIrrigationTypeByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<IrrigationTypeResponse>(
      {url: `/api/IrrigationType/getIrrigationTypeById`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiIrrigationTypeGetIrrigationTypeByIdQueryKey = (params?: GetApiIrrigationTypeGetIrrigationTypeByIdParams,) => [`/api/IrrigationType/getIrrigationTypeById`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiIrrigationTypeGetIrrigationTypeByIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiIrrigationTypeGetIrrigationTypeById>>, TError = ErrorType<unknown>>(params?: GetApiIrrigationTypeGetIrrigationTypeByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIrrigationTypeGetIrrigationTypeById>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiIrrigationTypeGetIrrigationTypeById>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiIrrigationTypeGetIrrigationTypeByIdQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiIrrigationTypeGetIrrigationTypeById>>> = ({ signal }) => getApiIrrigationTypeGetIrrigationTypeById(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiIrrigationTypeGetIrrigationTypeByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiIrrigationTypeGetIrrigationTypeById>>>
export type GetApiIrrigationTypeGetIrrigationTypeByIdQueryError = ErrorType<unknown>

export const useGetApiIrrigationTypeGetIrrigationTypeById = <TData = Awaited<ReturnType<typeof getApiIrrigationTypeGetIrrigationTypeById>>, TError = ErrorType<unknown>>(
 params?: GetApiIrrigationTypeGetIrrigationTypeByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIrrigationTypeGetIrrigationTypeById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiIrrigationTypeGetIrrigationTypeByIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiIrrigationTypeGetGetIrrigationTypes = (
    params?: GetApiIrrigationTypeGetGetIrrigationTypesParams,
 signal?: AbortSignal
) => {
      return customInstance<IrrigationTypeResponse[]>(
      {url: `/api/IrrigationType/getGetIrrigationTypes`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiIrrigationTypeGetGetIrrigationTypesQueryKey = (params?: GetApiIrrigationTypeGetGetIrrigationTypesParams,) => [`/api/IrrigationType/getGetIrrigationTypes`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiIrrigationTypeGetGetIrrigationTypesQueryOptions = <TData = Awaited<ReturnType<typeof getApiIrrigationTypeGetGetIrrigationTypes>>, TError = ErrorType<unknown>>(params?: GetApiIrrigationTypeGetGetIrrigationTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIrrigationTypeGetGetIrrigationTypes>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiIrrigationTypeGetGetIrrigationTypes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiIrrigationTypeGetGetIrrigationTypesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiIrrigationTypeGetGetIrrigationTypes>>> = ({ signal }) => getApiIrrigationTypeGetGetIrrigationTypes(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiIrrigationTypeGetGetIrrigationTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiIrrigationTypeGetGetIrrigationTypes>>>
export type GetApiIrrigationTypeGetGetIrrigationTypesQueryError = ErrorType<unknown>

export const useGetApiIrrigationTypeGetGetIrrigationTypes = <TData = Awaited<ReturnType<typeof getApiIrrigationTypeGetGetIrrigationTypes>>, TError = ErrorType<unknown>>(
 params?: GetApiIrrigationTypeGetGetIrrigationTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIrrigationTypeGetGetIrrigationTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiIrrigationTypeGetGetIrrigationTypesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiNewsGetNews = (
    
 signal?: AbortSignal
) => {
      return customInstance<Rss>(
      {url: `/api/News/getNews`, method: 'get', signal
    },
      );
    }
  

export const getGetApiNewsGetNewsQueryKey = () => [`/api/News/getNews`] as const;
  

    
export const getGetApiNewsGetNewsQueryOptions = <TData = Awaited<ReturnType<typeof getApiNewsGetNews>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiNewsGetNews>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiNewsGetNews>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiNewsGetNewsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiNewsGetNews>>> = ({ signal }) => getApiNewsGetNews(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiNewsGetNewsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiNewsGetNews>>>
export type GetApiNewsGetNewsQueryError = ErrorType<unknown>

export const useGetApiNewsGetNews = <TData = Awaited<ReturnType<typeof getApiNewsGetNews>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiNewsGetNews>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiNewsGetNewsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiNewsTest = (
    
 signal?: AbortSignal
) => {
      return customInstance<Rss>(
      {url: `/api/News/test`, method: 'get', signal
    },
      );
    }
  

export const getGetApiNewsTestQueryKey = () => [`/api/News/test`] as const;
  

    
export const getGetApiNewsTestQueryOptions = <TData = Awaited<ReturnType<typeof getApiNewsTest>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiNewsTest>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiNewsTest>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiNewsTestQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiNewsTest>>> = ({ signal }) => getApiNewsTest(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiNewsTestQueryResult = NonNullable<Awaited<ReturnType<typeof getApiNewsTest>>>
export type GetApiNewsTestQueryError = ErrorType<unknown>

export const useGetApiNewsTest = <TData = Awaited<ReturnType<typeof getApiNewsTest>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiNewsTest>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiNewsTestQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const postApiSoilTypeCreateUpdateSoilType = (
    soilTypeRequest: SoilTypeRequest,
 ) => {
      return customInstance<boolean>(
      {url: `/api/SoilType/createUpdateSoilType`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: soilTypeRequest
    },
      );
    }
  


export const getPostApiSoilTypeCreateUpdateSoilTypeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSoilTypeCreateUpdateSoilType>>, TError,{data: SoilTypeRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiSoilTypeCreateUpdateSoilType>>, TError,{data: SoilTypeRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiSoilTypeCreateUpdateSoilType>>, {data: SoilTypeRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiSoilTypeCreateUpdateSoilType(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiSoilTypeCreateUpdateSoilTypeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSoilTypeCreateUpdateSoilType>>>
    export type PostApiSoilTypeCreateUpdateSoilTypeMutationBody = SoilTypeRequest
    export type PostApiSoilTypeCreateUpdateSoilTypeMutationError = ErrorType<unknown>

    export const usePostApiSoilTypeCreateUpdateSoilType = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSoilTypeCreateUpdateSoilType>>, TError,{data: SoilTypeRequest}, TContext>, }
) => {
    
      const mutationOptions = getPostApiSoilTypeCreateUpdateSoilTypeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const postApiSoilTypeGetSoilTypeById = (
    params?: PostApiSoilTypeGetSoilTypeByIdParams,
 ) => {
      return customInstance<SoilTypeRequest>(
      {url: `/api/SoilType/getSoilTypeById`, method: 'post',
        params
    },
      );
    }
  


export const getPostApiSoilTypeGetSoilTypeByIdMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSoilTypeGetSoilTypeById>>, TError,{params?: PostApiSoilTypeGetSoilTypeByIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiSoilTypeGetSoilTypeById>>, TError,{params?: PostApiSoilTypeGetSoilTypeByIdParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiSoilTypeGetSoilTypeById>>, {params?: PostApiSoilTypeGetSoilTypeByIdParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiSoilTypeGetSoilTypeById(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiSoilTypeGetSoilTypeByIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSoilTypeGetSoilTypeById>>>
    
    export type PostApiSoilTypeGetSoilTypeByIdMutationError = ErrorType<unknown>

    export const usePostApiSoilTypeGetSoilTypeById = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiSoilTypeGetSoilTypeById>>, TError,{params?: PostApiSoilTypeGetSoilTypeByIdParams}, TContext>, }
) => {
    
      const mutationOptions = getPostApiSoilTypeGetSoilTypeByIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiSoilTypeGetSoilTypes = (
    params?: GetApiSoilTypeGetSoilTypesParams,
 signal?: AbortSignal
) => {
      return customInstance<SoilTypeResponse[]>(
      {url: `/api/SoilType/getSoilTypes`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiSoilTypeGetSoilTypesQueryKey = (params?: GetApiSoilTypeGetSoilTypesParams,) => [`/api/SoilType/getSoilTypes`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiSoilTypeGetSoilTypesQueryOptions = <TData = Awaited<ReturnType<typeof getApiSoilTypeGetSoilTypes>>, TError = ErrorType<unknown>>(params?: GetApiSoilTypeGetSoilTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiSoilTypeGetSoilTypes>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiSoilTypeGetSoilTypes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiSoilTypeGetSoilTypesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSoilTypeGetSoilTypes>>> = ({ signal }) => getApiSoilTypeGetSoilTypes(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiSoilTypeGetSoilTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSoilTypeGetSoilTypes>>>
export type GetApiSoilTypeGetSoilTypesQueryError = ErrorType<unknown>

export const useGetApiSoilTypeGetSoilTypes = <TData = Awaited<ReturnType<typeof getApiSoilTypeGetSoilTypes>>, TError = ErrorType<unknown>>(
 params?: GetApiSoilTypeGetSoilTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiSoilTypeGetSoilTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiSoilTypeGetSoilTypesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary CreateRole
 */
export const postApiUserRoleCreateRole = (
    roleModel: RoleModel,
 ) => {
      return customInstance<ApiResponse>(
      {url: `/api/UserRole/createRole`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: roleModel
    },
      );
    }
  


export const getPostApiUserRoleCreateRoleMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserRoleCreateRole>>, TError,{data: RoleModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUserRoleCreateRole>>, TError,{data: RoleModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserRoleCreateRole>>, {data: RoleModel}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserRoleCreateRole(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiUserRoleCreateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserRoleCreateRole>>>
    export type PostApiUserRoleCreateRoleMutationBody = RoleModel
    export type PostApiUserRoleCreateRoleMutationError = ErrorType<unknown>

    export const usePostApiUserRoleCreateRole = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserRoleCreateRole>>, TError,{data: RoleModel}, TContext>, }
) => {
    
      const mutationOptions = getPostApiUserRoleCreateRoleMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary UpdateRole
 */
export const putApiUserRoleUpdateRole = (
    roleUpdateModel: RoleUpdateModel,
 ) => {
      return customInstance<ApiResponse>(
      {url: `/api/UserRole/updateRole`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: roleUpdateModel
    },
      );
    }
  


export const getPutApiUserRoleUpdateRoleMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserRoleUpdateRole>>, TError,{data: RoleUpdateModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserRoleUpdateRole>>, TError,{data: RoleUpdateModel}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserRoleUpdateRole>>, {data: RoleUpdateModel}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserRoleUpdateRole(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutApiUserRoleUpdateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserRoleUpdateRole>>>
    export type PutApiUserRoleUpdateRoleMutationBody = RoleUpdateModel
    export type PutApiUserRoleUpdateRoleMutationError = ErrorType<unknown>

    export const usePutApiUserRoleUpdateRole = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserRoleUpdateRole>>, TError,{data: RoleUpdateModel}, TContext>, }
) => {
    
      const mutationOptions = getPutApiUserRoleUpdateRoleMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary GetRoles
 */
export const getApiUserRoleGetRoles = (
    
 signal?: AbortSignal
) => {
      return customInstance<IdentityRole[]>(
      {url: `/api/UserRole/getRoles`, method: 'get', signal
    },
      );
    }
  

export const getGetApiUserRoleGetRolesQueryKey = () => [`/api/UserRole/getRoles`] as const;
  

    
export const getGetApiUserRoleGetRolesQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserRoleGetRoles>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserRoleGetRoles>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiUserRoleGetRoles>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserRoleGetRolesQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserRoleGetRoles>>> = ({ signal }) => getApiUserRoleGetRoles(signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiUserRoleGetRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserRoleGetRoles>>>
export type GetApiUserRoleGetRolesQueryError = ErrorType<unknown>

export const useGetApiUserRoleGetRoles = <TData = Awaited<ReturnType<typeof getApiUserRoleGetRoles>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserRoleGetRoles>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUserRoleGetRolesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


/**
 * @summary DeleteRole
 */
export const deleteApiUserRoleDeleteRole = (
    params?: DeleteApiUserRoleDeleteRoleParams,
 ) => {
      return customInstance<ApiResponse>(
      {url: `/api/UserRole/deleteRole`, method: 'delete',
        params
    },
      );
    }
  


export const getDeleteApiUserRoleDeleteRoleMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserRoleDeleteRole>>, TError,{params?: DeleteApiUserRoleDeleteRoleParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserRoleDeleteRole>>, TError,{params?: DeleteApiUserRoleDeleteRoleParams}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUserRoleDeleteRole>>, {params?: DeleteApiUserRoleDeleteRoleParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiUserRoleDeleteRole(params,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUserRoleDeleteRoleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUserRoleDeleteRole>>>
    
    export type DeleteApiUserRoleDeleteRoleMutationError = ErrorType<unknown>

    export const useDeleteApiUserRoleDeleteRole = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserRoleDeleteRole>>, TError,{params?: DeleteApiUserRoleDeleteRoleParams}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiUserRoleDeleteRoleMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getApiWeatherGetCurrentConditions = (
    params?: GetApiWeatherGetCurrentConditionsParams,
 signal?: AbortSignal
) => {
      return customInstance<CurrentConditions[]>(
      {url: `/api/Weather/GetCurrentConditions`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiWeatherGetCurrentConditionsQueryKey = (params?: GetApiWeatherGetCurrentConditionsParams,) => [`/api/Weather/GetCurrentConditions`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiWeatherGetCurrentConditionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiWeatherGetCurrentConditions>>, TError = ErrorType<unknown>>(params?: GetApiWeatherGetCurrentConditionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiWeatherGetCurrentConditions>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiWeatherGetCurrentConditions>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiWeatherGetCurrentConditionsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiWeatherGetCurrentConditions>>> = ({ signal }) => getApiWeatherGetCurrentConditions(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiWeatherGetCurrentConditionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiWeatherGetCurrentConditions>>>
export type GetApiWeatherGetCurrentConditionsQueryError = ErrorType<unknown>

export const useGetApiWeatherGetCurrentConditions = <TData = Awaited<ReturnType<typeof getApiWeatherGetCurrentConditions>>, TError = ErrorType<unknown>>(
 params?: GetApiWeatherGetCurrentConditionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiWeatherGetCurrentConditions>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiWeatherGetCurrentConditionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getApiWeatherGetLocationKey = (
    params?: GetApiWeatherGetLocationKeyParams,
 signal?: AbortSignal
) => {
      return customInstance<GeoLocation>(
      {url: `/api/Weather/GetLocationKey`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiWeatherGetLocationKeyQueryKey = (params?: GetApiWeatherGetLocationKeyParams,) => [`/api/Weather/GetLocationKey`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiWeatherGetLocationKeyQueryOptions = <TData = Awaited<ReturnType<typeof getApiWeatherGetLocationKey>>, TError = ErrorType<unknown>>(params?: GetApiWeatherGetLocationKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiWeatherGetLocationKey>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiWeatherGetLocationKey>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiWeatherGetLocationKeyQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiWeatherGetLocationKey>>> = ({ signal }) => getApiWeatherGetLocationKey(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiWeatherGetLocationKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getApiWeatherGetLocationKey>>>
export type GetApiWeatherGetLocationKeyQueryError = ErrorType<unknown>

export const useGetApiWeatherGetLocationKey = <TData = Awaited<ReturnType<typeof getApiWeatherGetLocationKey>>, TError = ErrorType<unknown>>(
 params?: GetApiWeatherGetLocationKeyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiWeatherGetLocationKey>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiWeatherGetLocationKeyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


